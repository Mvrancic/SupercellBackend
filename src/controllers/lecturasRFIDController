const LecturasRFID = require('../models/lecturasRFIDModel');

// Controlador para agregar una nueva tarjeta RFID
exports.agregarTarjeta = async (req, res) => {
  try {
    const nuevaTarjeta = new LecturasRFID({
      tarjeta_id: req.body.tarjeta_id,
      tipo: req.body.tipo,
      acceso: req.body.acceso,
      lector_id: req.body.lector_id,
      timestamp: new Date()  // Utiliza new Date() para obtener la fecha y hora actual
    });

    const tarjetaGuardada = await nuevaTarjeta.save();
    res.status(201).json(tarjetaGuardada);
  } catch (err) {
    console.error('Error al agregar tarjeta RFID:', err.message);
    res.status(500).json({ message: err.message });
  }
};

// Controlador para obtener el último ID de tarjeta RFID registrado
exports.getUltimoIdTarjeta = async (req, res) => {
  try {
    console.log('Buscando la última tarjeta RFID...');
    const ultimaTarjeta = await LecturasRFID.findOne().sort({ timestamp: -1 });

    if (!ultimaTarjeta) {
      console.log('No se encontraron tarjetas RFID registradas');
      return res.status(404).json({ message: 'No se encontraron tarjetas RFID registradas' });
    }

    console.log('Última tarjeta RFID encontrada:', ultimaTarjeta);
    console.log('Último ID de tarjeta RFID:', ultimaTarjeta.tarjeta_id);

    res.json({ ultimo_id_tarjeta: ultimaTarjeta.tarjeta_id });
  } catch (err) {
    console.error('Error al obtener el último ID de tarjeta RFID:', err.message);
    res.status(500).json({ message: err.message });
  }
};
